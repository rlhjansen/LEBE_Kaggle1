8-1-2017

Opdracht gekozen: Mercari price suggestion



9-1-2017


#############################
## Vondsten & Beslissingen ##
#############################

Github & Pycharm opgezet.
Bepaald om in python 2 te werken
Aanwezig iedere dag om 11.


#############################
##        Uitgezocht       ##
#############################

links in links.txt

Shelby

datacleaning & undestanding

Maurits

Kaggle data science guide


Reitze

Kernel competition.*
Programmastructuur opgezet, notulen geschreven.

*Kernel competition houd in dat je je machine learning algoritme op de server van
kaggle gaat laten trainen. dit is om ervoor te zorgen dat elk team dezelfde specs
gebruikt.

Hoe dat moet vergt nog uitzoekwerk


#############################
##     Voorlopige taken    ##
#############################

onverdeeld
uitzoeken hoe merknamen met spaties erin als enkel merk te herkennen.


Maurits:
Uitzoeken pandas


Reitze:

Mail schrijven of het doel is om effectieve pricing te creeeren of om pricing te
genereren die past bij wat een goede score geeft op kaggle.
Handige samenwerkings programs zoeken/fixen
python 2 installeren


Shelby:

Uitzoeken Knime
Uitzoeken missing value approaches


#############################
## Voorlopige doelen Data  ##
#############################



Maurits:

Library uitzoeken om catagoriëen samen te voegen (hoofdletters/spelfouten)

onverdeeld:

product bundels herkennen*
structuur/trends missing values onderzoeken. vindbaarheid missing values onderzoeken



*Bij de kaggle opdracht staat dat mensen hun producten ook gebundeld kunnen verkopen.
denk hierbij aan bijvoorbeeld een compleet pak, of een bankenstelsel ipv een losse bank.
hiervoor kan het handig zijn wat te bedenken.


Reitze:

Dictionary maken* die clustering van tags weergeeft. (onderzoeksopties)
dit onafhankelijk van type data (woorden in titel & woorden in categoriëen hebben gelden allen als tokens



*
key:value
tag:[(othertag, #), (yetAnotherTag, #), ...]

10-1-2018

Reitze:

erachter gekomen dat ik stiekem nog leuk doorschrijf in python 3.
maakt niet uit behalve voor de print statements, moet ik nog aanpassen

Bezig geweest functies te schrijven om de data op te schonen.
nog te doen:
functie schrijven die door de beschrijvingen heenloopt.
functie schrijven die tijdens het doorheenlopen per woord kijkt of het voorkomt
in de dictionary van gedeeltelijke merknamen of de dictionary van merknamen
functie aan de data bij merk het goede merk toevoegd

comments

Shelby:
Ik ben bezig geweest met het uitzoeken hoe KNIME werkt door redelijk veel tutorials te bekijken.
Ik heb geprobeerd te werken met de data in KNIME, maar de data is te groot wat voor problemen zorgt.
KNIME werkt dus niet voor ons project.


11-1-2018

Reitze
erachtergekomen dat er merknamen zijn die ongelukkig uitvallen, dat mensen de
merknamen verkeerd schrijven en dat er bij gepoogde merkherkenning nog wel eens
verkeerde merken herkend worden omdat deze ook in de beschrijvingen staan.

als gevolg hiervan besloten merkherkenning te skippen en verder te gaan met alle
woorden (met categorie als gehele woorden wellicht) als deel van de input.


Shelby:
Literatuuronderzoek gedaan naar vergelijkbare problemen en mogelijke plotjes bekeken voor de data

12-1-2018

Reitze
Functies geschreven die
1) trainingset omzetten in een dictionary van input waarden
2) deze waarden schoonmaken (gekke tekens eruit)
3) deze converteren naar input voor neural network of ander ML programma

Shelby:
onderzoeksvraag en deelvragen proberen te bedenken, nog niet helemaal uitgekomen
data analyseren om er plotjes van te maken, af hankelijk van de deelvragen
Als deelvragen bekend zijn dan weet ik welke plotjes ik kan gebruiken
labboek1 geschreven om in te leveren

15-1-2018
Shelby:
Introductie en opdracht van verslag geschreven. Data visualiseren

Maurits: 
Bezig geweest met het inlezen van data om zelf mee te testen. 
Kijken op welke manieren we het aantal woorden kunnen reduceren.

16-1-2018

Maurits:
De manieren om woorden te reduceren in kaart brengen. 
Hier de eerste stappen in nemen op een enkele string dmv meervoudsvormen enkelvoud te maken.
Begin maken van het lemmatizen van werkwoorden.

17-1-2018

Maurits:
Nog steeds bezig met het aantal woorden te reduceren.
Uitzoeken of we synoniemen kunnen reduceren. Lijkt neit alleen lastig maar ook te veel tijd te kosten tijdens het inlezen.
Achter gekomen dat meervoudsvormen net zoals werkwoorden op dezelfde manier gelemmatizeerd kunnen worden en dat op een string getest.

18-1-2018

Maurits:
Stopwoorden uit de beschrijvinghalen en testen op een string.

19-1-2018

Maurits:
Spellingfouten uit de string laten halen.
Tijden van dit en het lemmatizeren testen.
Lemmatizeren blijkt veel te veel tijd te kosten dus daar een oplossing voor bedenken.

Jochem: (dit heb ik deze week gedaan, niet deze dag)
 - Een neuraal netwerk van sklearn uitgekozen voor gebruik.
 - De zinnen die in train.tsv voorkomen omzetten in losse woorden.
 - Alle data omzetten in input-vectoren die het neurale net kan lezen.
 - Alle input-vectorer opslaan in twee bestanden: een voor trainen en een voor testen.
 - Een data_analyse.py geschreven die:
   - Het woordenaantal telt
   - De lengte van de input-vectoren voorspelt aan de hand van de THRESH parameter
        De THRESH parameter zegt hoe vaak een woord moet voorkomen in de train.tsv voordat het in een input-vector komt.
   - Weergeeft hoeveel woorden, hoe vaak voorkomen.


22-1-2018:
Shelby: Ik ben begonnen met het schrijven van het verslag

reitze:
voor woensdag:
 - onderzoek gedaan naar implementatie voor word2vec in dit neural network, uiteindelijk te traag.

na woensdag:
 - uitgezocht hoe de kernel van kaggle werkt
 - onsoepelheden uit de thresh variant van het neurale netwerk gehaald ivm deze kernel
 - onderdeel voor preprocessing & discussie geschreven voor het verslag


--- logboek totaaltje ---
Jochem:
 - Ben er een week later bij gekomen (wellicht vermeldenswaardig)
 - Eerste implementatie van de regressor gecodeerd, daar waren we er achter gekomen dat we geen strings in de regressor konden gooien.
 - Programma geschreven dat alle woorden uit de data haalt, daar nummers van maakt en dat opslaat.
 - Programma geschreven dat kijkt voor alle woorden hoe vaak ze voorkomen om de data te kunnen analyseren.
 - Programma geschreven dat de opslag van woord-nummers optimaliseerd door niet de volledige binaire vectoren op te slaan, maar alleen de indexen van op welke plek een vector een '1' moet bevatten.
 - Programma geschreven dat datarijen sorteert op 'classen' een class is een combinatie van 'shipping', 'categories' en 'condition'.
 - Programma geschreven dat het gemiddelde gebruik van een woord berekend.
 - Programma geschreven dat woorden sorteert op hun delta functie, dit wordt berekend door het gemiddelde woordgebruik over de hele data set af te trekken van het gemiddelde woordgebruik over alle classes en daar de absolute waarde van te nemen.
 - De regressor aangepast zodat het data kan gebruiken van de "thresh"-, en "delta"preprocessers. Dit getest en data uit gehaald. Later heeft Reitze een betere versie geschreven.
 - Programma geschreven dat woorden sorteert op hun invloed op de prijs, maar dit niet af gekregen om het mee te kunnen nemen in het testen.
 - Programma geschreven dat algemeen nuttige gegevens laat zien over de train.tsv aangezien het niet mogelijk was om deze te openen met gedit of libreOffice.
 - De dia's over de resultaten van de presentatie voorbereid.
 - De alinea's onder de kopjes 'delta' en 'methoden' geschreven in het verslag.






Reitze:
 - pycharm met Github repository opgezet voor maurits en shelby.
 - Functies voor het preprocessen van de input voor de threshold versie van het neural network geschreven.:
1) Trainingset omzetten in een dictionary van input waarden
2) Deze waarden schoonmaken (gekke tekens eruit)
3) Deze geconverteerd naar input voor het threshold neural network
 - Onderzoek gedaan naar implementatie voor word2vec in dit neural network, zou met de implementatie van threshhold een te grote input-vector leveren (ivm trainingsduur die dan verhondervoudigt werd) dus dit is achterwege gelaten.
 - Functies geschreven en herschreven die resultaten (validation error & train error) van de neurale netwerken verzamelt en opslaat.
 - Code compatibel gemaakt met de kaggle kernel (python 2.7 -> python 3.6 (lamda functies en I/O)).
 - Functies geschreven voor het maken van grafieken.
 - Allround helpen met bugs fiksen.
